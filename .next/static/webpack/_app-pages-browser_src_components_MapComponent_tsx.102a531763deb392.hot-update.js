"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("_app-pages-browser_src_components_MapComponent_tsx",{

/***/ "(app-pages-browser)/./src/components/MapComponent.tsx":
/*!*****************************************!*\
  !*** ./src/components/MapComponent.tsx ***!
  \*****************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/.pnpm/next@15.1.4_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/.pnpm/next@15.1.4_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var leaflet__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! leaflet */ \"(app-pages-browser)/./node_modules/.pnpm/leaflet@1.9.4/node_modules/leaflet/dist/leaflet-src.js\");\n/* harmony import */ var leaflet__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(leaflet__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var leaflet_dist_leaflet_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! leaflet/dist/leaflet.css */ \"(app-pages-browser)/./node_modules/.pnpm/leaflet@1.9.4/node_modules/leaflet/dist/leaflet.css\");\n/* harmony import */ var xmldom__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! xmldom */ \"(app-pages-browser)/./node_modules/.pnpm/xmldom@0.6.0/node_modules/xmldom/lib/dom-parser.js\");\n/* harmony import */ var _tmcw_togeojson__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @tmcw/togeojson */ \"(app-pages-browser)/./node_modules/.pnpm/@tmcw+togeojson@7.1.1/node_modules/@tmcw/togeojson/dist/togeojson.es.mjs\");\n\nvar _s = $RefreshSig$();\n\n\n\n\n\n// Define URLs for INPE KML data\nconst inpeUrls = [\n    'https://dataserver-coids.inpe.br/queimadas/queimadas/focos/kml/estados-48h/focos_frentes_MT.kml',\n    'https://dataserver-coids.inpe.br/queimadas/queimadas/focos/kml/estados-48h/focos_frentes_MS.kml'\n];\n// Custom icon for fire points\nconst fireIcon = leaflet__WEBPACK_IMPORTED_MODULE_2___default().icon({\n    iconUrl: 'https://img.icons8.com/plasticine/100/fire-element--v1.png',\n    iconSize: [\n        30,\n        30\n    ],\n    iconAnchor: [\n        15,\n        30\n    ],\n    popupAnchor: [\n        0,\n        -30\n    ] // point from which the popup should open relative to the iconAnchor\n});\n// Refresh interval in milliseconds (10 minutes = 600 seconds * 1000 ms/s)\nconst REFRESH_INTERVAL = 600 * 1000;\nconst MapComponent = (param)=>{\n    let { center, zoom } = param;\n    _s();\n    const mapContainerRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const mapRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const [fireDataLayers, setFireDataLayers] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const farmLayerRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null); // Ref to store farm layer\n    const layersControlRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null); // Ref for layers control\n    // Function to fetch and process KML data (for fire points) via internal API proxy\n    const fetchAndProcessFireKML = async (inpeUrl)=>{\n        try {\n            // Use the internal API route as a proxy\n            const proxyApiUrl = \"/api/inpe-kml?url=\".concat(encodeURIComponent(inpeUrl));\n            const response = await fetch(proxyApiUrl);\n            if (!response.ok) {\n                throw new Error(\"Erro no proxy interno! status: \".concat(response.status, \" para \").concat(inpeUrl));\n            }\n            const kmlText = await response.text();\n            return processKMLText(kmlText, inpeUrl);\n        } catch (error) {\n            console.error(\"Erro ao buscar ou processar KML de \".concat(inpeUrl, \" via proxy interno:\"), error);\n            return null;\n        }\n    };\n    // Helper function to process KML text into GeoJSON layer\n    const processKMLText = (kmlText, sourceUrl)=>{\n        try {\n            const parser = new xmldom__WEBPACK_IMPORTED_MODULE_4__.DOMParser();\n            const kmlDoc = parser.parseFromString(kmlText, 'text/xml');\n            // Check for parser errors\n            const parsererrorNS = kmlDoc.getElementsByTagName(\"parsererror\");\n            if (parsererrorNS.length > 0) {\n                console.error(\"Erro de parsing KML de \".concat(sourceUrl, \":\"), parsererrorNS[0].textContent);\n                throw new Error('Erro de parsing KML');\n            }\n            const geojson = (0,_tmcw_togeojson__WEBPACK_IMPORTED_MODULE_5__.kml)(kmlDoc); // Assuming fire data are points\n            // Filter out non-point features if necessary\n            const pointFeatures = geojson.features.filter((feature)=>{\n                var _feature_geometry;\n                return ((_feature_geometry = feature.geometry) === null || _feature_geometry === void 0 ? void 0 : _feature_geometry.type) === 'Point';\n            });\n            const pointFeatureCollection = {\n                type: 'FeatureCollection',\n                features: pointFeatures\n            };\n            if (pointFeatures.length === 0) {\n                console.log(\"Nenhum foco de inc\\xeandio (ponto) encontrado em \".concat(sourceUrl));\n                // Return an empty layer group instead of null to avoid issues in Promise.all\n                return leaflet__WEBPACK_IMPORTED_MODULE_2___default().geoJSON();\n            }\n            const layer = leaflet__WEBPACK_IMPORTED_MODULE_2___default().geoJSON(pointFeatureCollection, {\n                pointToLayer: (feature, latlng)=>{\n                    return leaflet__WEBPACK_IMPORTED_MODULE_2___default().marker(latlng, {\n                        icon: fireIcon\n                    });\n                },\n                onEachFeature: (feature, layer)=>{\n                    if (feature.properties) {\n                        let popupContent = \"<b>\".concat(feature.properties.name || 'Foco de Incêndio', \"</b>\");\n                        if (feature.properties.description) {\n                            const desc = feature.properties.description;\n                            // Extract specific fields from the description table\n                            const dateTimeMatch = desc.match(/<td>Data Hora UTC<\\/td><td>([^<]+)<\\/td>/);\n                            const satelliteMatch = desc.match(/<td>Satélite<\\/td><td>([^<]+)<\\/td>/);\n                            const municipioMatch = desc.match(/<td>Município<\\/td><td>([^<]+)<\\/td>/);\n                            const estadoMatch = desc.match(/<td>Estado<\\/td><td>([^<]+)<\\/td>/);\n                            if (dateTimeMatch === null || dateTimeMatch === void 0 ? void 0 : dateTimeMatch[1]) popupContent += \"<br/>Data/Hora: \".concat(dateTimeMatch[1]);\n                            if (satelliteMatch === null || satelliteMatch === void 0 ? void 0 : satelliteMatch[1]) popupContent += \"<br/>Sat\\xe9lite: \".concat(satelliteMatch[1]);\n                            if (municipioMatch === null || municipioMatch === void 0 ? void 0 : municipioMatch[1]) popupContent += \"<br/>Munic\\xedpio: \".concat(municipioMatch[1]);\n                            if (estadoMatch === null || estadoMatch === void 0 ? void 0 : estadoMatch[1]) popupContent += \"<br/>Estado: \".concat(estadoMatch[1]);\n                        }\n                        layer.bindPopup(popupContent);\n                    }\n                }\n            });\n            return layer;\n        } catch (parseError) {\n            console.error(\"Erro ao processar KML de \".concat(sourceUrl, \":\"), parseError);\n            return null; // Return null on error\n        }\n    };\n    // Function to update fire data\n    const updateFireData = async ()=>{\n        var _mapRef_current;\n        if (!mapRef.current) return;\n        console.log('Atualizando dados de incêndio via proxy interno...');\n        const newLayers = await Promise.all(inpeUrls.map((url)=>fetchAndProcessFireKML(url)));\n        const validNewLayers = newLayers.filter((layer)=>layer !== null);\n        // Remove old layers from map and control\n        fireDataLayers.forEach((layer)=>{\n            var _mapRef_current;\n            (_mapRef_current = mapRef.current) === null || _mapRef_current === void 0 ? void 0 : _mapRef_current.removeLayer(layer);\n            if (layersControlRef.current) {\n                layersControlRef.current.removeLayer(layer);\n            }\n        });\n        // Add new layers to map and control\n        const fireLayerGroup = leaflet__WEBPACK_IMPORTED_MODULE_2___default().layerGroup(validNewLayers);\n        (_mapRef_current = mapRef.current) === null || _mapRef_current === void 0 ? void 0 : _mapRef_current.addLayer(fireLayerGroup);\n        if (layersControlRef.current) {\n            layersControlRef.current.addOverlay(fireLayerGroup, \"Focos de Incêndio (INPE)\");\n        }\n        // Update state\n        setFireDataLayers(validNewLayers); // Store individual layers for removal later\n        console.log(\"Dados de inc\\xeandio atualizados. \".concat(validNewLayers.reduce((acc, layer)=>acc + layer.getLayers().length, 0), \" focos carregados.\"));\n    };\n    // Function to load and process farm KML data\n    const loadFarmKML = async (kmlUrl, layerName)=>{\n        try {\n            console.log(\"Carregando dados KML da fazenda de \".concat(kmlUrl, \"...\"));\n            const response = await fetch(kmlUrl);\n            if (!response.ok) {\n                throw new Error(\"Erro ao carregar KML da fazenda! Status: \".concat(response.status));\n            }\n            const kmlText = await response.text();\n            console.log(\"KML da fazenda carregado com sucesso, processando...\");\n            const parser = new xmldom__WEBPACK_IMPORTED_MODULE_4__.DOMParser();\n            const kmlDoc = parser.parseFromString(kmlText, \"text/xml\");\n            // Check for parser errors\n            const parsererrorNS = kmlDoc.getElementsByTagName(\"parsererror\");\n            if (parsererrorNS.length > 0) {\n                console.error(\"Erro de parsing KML da fazenda:\", parsererrorNS[0].textContent);\n                throw new Error(\"Erro de parsing KML da fazenda\");\n            }\n            const geojson = (0,_tmcw_togeojson__WEBPACK_IMPORTED_MODULE_5__.kml)(kmlDoc);\n            console.log(\"GeoJSON processado:\", geojson);\n            if (!geojson || !geojson.features || geojson.features.length === 0) {\n                console.warn(\"Nenhuma feature encontrada no KML da fazenda\");\n                return;\n            }\n            const newFarmLayer = leaflet__WEBPACK_IMPORTED_MODULE_2___default().geoJSON(geojson, {\n                style: function(feature) {\n                    var _feature_properties;\n                    let style = {\n                        color: \"#ff0000\",\n                        weight: 3,\n                        opacity: 0.8,\n                        fillOpacity: 0.2,\n                        fillColor: \"#ff0000\"\n                    };\n                    // Aplicar estilos baseados no styleUrl se disponível\n                    if (feature === null || feature === void 0 ? void 0 : (_feature_properties = feature.properties) === null || _feature_properties === void 0 ? void 0 : _feature_properties.styleUrl) {\n                        if (feature.properties.styleUrl.includes(\"PolyStyle007\")) {\n                            style.color = \"#00ffff\";\n                            style.fillColor = \"#00ffff\";\n                            style.fillOpacity = 0.1;\n                            style.weight = 2;\n                        } else if (feature.properties.styleUrl.includes(\"PolyStyle0012\")) {\n                            style.color = \"#fcb4d4\";\n                            style.fillColor = \"#fcb4d4\";\n                            style.fillOpacity = 0.1;\n                            style.weight = 2;\n                        } else if (feature.properties.styleUrl.includes(\"PolyStyle00159\")) {\n                            // Estilo do KML fornecido\n                            style.color = \"#f0f0f0\";\n                            style.fillColor = \"#f0f0f0\";\n                            style.fillOpacity = 0.07;\n                            style.weight = 3;\n                        }\n                    }\n                    return style;\n                },\n                onEachFeature: function(feature, layer) {\n                    let popupContent = feature.properties && feature.properties.name ? \"<b>\".concat(feature.properties.name, \"</b>\") : \"<b>Perímetro da Fazenda</b>\";\n                    layer.bindPopup(popupContent);\n                }\n            });\n            if (mapRef.current) {\n                newFarmLayer.addTo(mapRef.current);\n                console.log(\"Camada da fazenda \".concat(layerName, \" adicionada ao mapa\"));\n                // Add farm layer to the control\n                if (layersControlRef.current) {\n                    layersControlRef.current.addOverlay(newFarmLayer, layerName);\n                    console.log(\"Camada da fazenda \".concat(layerName, \" adicionada ao controle de camadas\"));\n                }\n                // Fit map to farm bounds (only for the first KML loaded, or if no other farm KML is loaded)\n                if (!farmLayerRef.current) {\n                    const bounds = newFarmLayer.getBounds();\n                    if (bounds.isValid()) {\n                        mapRef.current.fitBounds(bounds, {\n                            padding: [\n                                20,\n                                20\n                            ]\n                        });\n                        console.log(\"Mapa ajustado aos limites da fazenda\");\n                    }\n                }\n                farmLayerRef.current = newFarmLayer; // Store the last loaded farm layer\n            }\n        } catch (error) {\n            console.error(\"Erro ao carregar KML da fazenda \".concat(kmlUrl, \":\"), error);\n        }\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"MapComponent.useEffect\": ()=>{\n            let isMounted = true;\n            let intervalId = null;\n            if (mapContainerRef.current && !mapRef.current) {\n                // Initialize map\n                mapRef.current = leaflet__WEBPACK_IMPORTED_MODULE_2___default().map(mapContainerRef.current, {\n                    center: center,\n                    zoom: zoom\n                });\n                // --- Define Base Layers ---\n                const osmLayer = leaflet__WEBPACK_IMPORTED_MODULE_2___default().tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n                    attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n                });\n                const esriSatelliteLayer = leaflet__WEBPACK_IMPORTED_MODULE_2___default().tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', {\n                    attribution: 'Tiles &copy; Esri &mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community'\n                });\n                // Add default base layer (OSM)\n                osmLayer.addTo(mapRef.current);\n                // --- Define Overlay Layers ---\n                const overlayMaps = {}; // Will be populated later\n                // --- Add Layers Control ---\n                const baseMaps = {\n                    \"OpenStreetMap\": osmLayer,\n                    \"Satélite (ESRI)\": esriSatelliteLayer\n                };\n                layersControlRef.current = leaflet__WEBPACK_IMPORTED_MODULE_2___default().control.layers(baseMaps, overlayMaps).addTo(mapRef.current);\n                // Fix for marker icons\n                delete (leaflet__WEBPACK_IMPORTED_MODULE_2___default().Icon).Default.prototype._getIconUrl;\n                leaflet__WEBPACK_IMPORTED_MODULE_2___default().Icon.Default.mergeOptions({\n                    iconRetinaUrl: 'https://unpkg.com/leaflet@1.9.4/dist/images/marker-icon-2x.png',\n                    iconUrl: 'https://unpkg.com/leaflet@1.9.4/dist/images/marker-icon.png',\n                    shadowUrl: 'https://unpkg.com/leaflet@1.9.4/dist/images/marker-shadow.png'\n                });\n                // Load Farm KML data\n                const farmKMLs = [\n                    {\n                        url: '/doc.kml',\n                        name: 'Fazenda Atalaia'\n                    }\n                ];\n                farmKMLs.forEach({\n                    \"MapComponent.useEffect\": (farm)=>{\n                        loadFarmKML(farm.url, farm.name);\n                    }\n                }[\"MapComponent.useEffect\"]);\n                // Initial fetch of INPE Fire KML data\n                updateFireData(); // This will now also add fire layers to the control\n                // Set up interval for periodic updates\n                intervalId = setInterval(updateFireData, REFRESH_INTERVAL);\n            }\n            // Cleanup function\n            return ({\n                \"MapComponent.useEffect\": ()=>{\n                    isMounted = false;\n                    if (intervalId) {\n                        clearInterval(intervalId);\n                    }\n                // Optional: Clean up map instance if component unmounts\n                // if (mapRef.current) {\n                //   mapRef.current.remove();\n                //   mapRef.current = null;\n                // }\n                }\n            })[\"MapComponent.useEffect\"];\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        }\n    }[\"MapComponent.useEffect\"], [\n        center,\n        zoom\n    ]); // Only re-run if center/zoom props change\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        ref: mapContainerRef,\n        style: {\n            height: '100vh',\n            width: '100%'\n        }\n    }, void 0, false, {\n        fileName: \"D:\\\\Aplicativo_monitoramento de incendios\\\\fire_monitor_app_backup\\\\webapp\\\\src\\\\components\\\\MapComponent.tsx\",\n        lineNumber: 314,\n        columnNumber: 10\n    }, undefined);\n};\n_s(MapComponent, \"K+oeeKqUn14Zt1fH14kWfUl7bbM=\");\n_c = MapComponent;\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (MapComponent);\nvar _c;\n$RefreshReg$(_c, \"MapComponent\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/MapComponent.tsx\n"));

/***/ })

});